import React from 'react';
import {
  Paper,
  Text,
  Group,
  Stack,
  ThemeIcon,
  Badge,
  Card,
  SimpleGrid,
  Accordion,
  List,
  useMantineTheme,
} from '@mantine/core';
import {
  IconBrain,
  IconBulb,
  IconChartBar,
  IconAlertCircle,
  IconTrendingUp,
  IconTrendingDown,
  IconInfoCircle,
  IconArrowRight,
  IconStar,
} from '@tabler/icons-react';

interface InsightsPanelProps {
  insights: any;
}

export function InsightsPanel({ insights }: InsightsPanelProps) {
  const theme = useMantineTheme();
  
  if (!insights) {
    return (
      <Paper p="md" withBorder>
        <Text>No insights available.</Text>
      </Paper>
    );
  }

  // Mock insights for demo purposes
  // In a real implementation, this would come from the actual insights generated by the explainer agent
  const mockInsights = {
    key_findings: [
      {
        title: "Monthly Charges is the Most Important Factor",
        description: "Customers with higher monthly charges are 3.2x more likely to churn. This suggests that price sensitivity is a major factor in customer retention.",
        impact: "high",
        confidence: 0.92,
        category: "pricing"
      },
      {
        title: "Contract Type Strongly Influences Churn",
        description: "Customers on month-to-month contracts are 5.8x more likely to churn compared to those on two-year contracts. Long-term contracts significantly improve retention.",
        impact: "high",
        confidence: 0.95,
        category: "contract"
      },
      {
        title: "Internet Service Type Affects Churn Rate",
        description: "Fiber optic customers have a 42% higher churn rate compared to DSL customers. This may indicate service quality or pricing issues with the fiber optic offering.",
        impact: "medium",
        confidence: 0.87,
        category: "service"
      },
      {
        title: "Online Security and Tech Support Reduce Churn",
        description: "Customers with online security and tech support services are 62% less likely to churn. These value-added services appear to increase customer satisfaction and loyalty.",
        impact: "medium",
        confidence: 0.89,
        category: "services"
      },
      {
        title: "Payment Method Correlates with Churn",
        description: "Customers using electronic checks have a 2.4x higher churn rate compared to those using automatic payment methods. This may indicate a relationship between payment reliability and customer commitment.",
        impact: "medium",
        confidence: 0.83,
        category: "payment"
      }
    ],
    recommendations: [
      {
        title: "Offer Discounts for Long-term Contracts",
        description: "Incentivize month-to-month customers to switch to annual or two-year contracts with significant discounts or added benefits.",
        expected_impact: "high",
        implementation_difficulty: "low",
        category: "pricing"
      },
      {
        title: "Bundle Online Security with Fiber Service",
        description: "Include online security services by default with fiber optic subscriptions to increase perceived value and reduce churn in this high-risk segment.",
        expected_impact: "high",
        implementation_difficulty: "medium",
        category: "service"
      },
      {
        title: "Implement Automatic Payment Incentives",
        description: "Offer a small discount (3-5%) for customers who switch from electronic checks to automatic payment methods.",
        expected_impact: "medium",
        implementation_difficulty: "low",
        category: "payment"
      },
      {
        title: "Develop Targeted Retention Program for High-Value Customers",
        description: "Create a proactive retention program specifically for customers with high monthly charges, offering personalized services and loyalty rewards.",
        expected_impact: "high",
        implementation_difficulty: "high",
        category: "retention"
      },
      {
        title: "Review Fiber Optic Service Quality and Pricing",
        description: "Conduct a comprehensive review of fiber optic service quality and pricing structure to address potential issues causing higher churn.",
        expected_impact: "medium",
        implementation_difficulty: "high",
        category: "service"
      }
    ],
    model_insights: {
      performance_analysis: "The Random Forest model achieved 87% accuracy with balanced precision and recall, indicating reliable predictions across both churn and non-churn classes.",
      feature_importance_analysis: "The model identified monthly charges, contract type, and tenure as the three most predictive features, collectively accounting for 68% of the model's predictive power.",
      data_quality_assessment: "The dataset had good overall quality with minimal missing values. However, there was some class imbalance (26% churn vs 74% non-churn) that was addressed through appropriate resampling techniques."
    },
    customer_segments: [
      {
        name: "High-Risk New Customers",
        description: "Recent customers (< 12 months) with high monthly charges on month-to-month contracts.",
        churn_rate: 0.57,
        population_percentage: 0.18,
        key_characteristics: ["Low tenure", "High monthly charges", "Month-to-month contract", "No added services"]
      },
      {
        name: "Stable Long-term Customers",
        description: "Long-term customers (> 36 months) on two-year contracts with multiple services.",
        churn_rate: 0.07,
        population_percentage: 0.31,
        key_characteristics: ["High tenure", "Two-year contract", "Multiple added services", "Automatic payments"]
      },
      {
        name: "At-Risk Fiber Customers",
        description: "Fiber optic customers with high technical requirements but without tech support services.",
        churn_rate: 0.38,
        population_percentage: 0.22,
        key_characteristics: ["Fiber optic service", "No tech support", "Medium-high monthly charges"]
      },
      {
        name: "Price-Sensitive Basic Users",
        description: "Customers with basic services who are highly sensitive to price increases.",
        churn_rate: 0.29,
        population_percentage: 0.15,
        key_characteristics: ["Basic service package", "Low-medium tenure", "Electronic check payments"]
      }
    ]
  };

  // Get color for impact level
  const getImpactColor = (impact: string) => {
    switch (impact.toLowerCase()) {
      case 'high':
        return 'red';
      case 'medium':
        return 'orange';
      case 'low':
        return 'yellow';
      default:
        return 'gray';
    }
  };

  // Get color for confidence level
  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.9) return 'green';
    if (confidence >= 0.8) return 'blue';
    if (confidence >= 0.7) return 'yellow';
    return 'gray';
  };

  return (
    <Stack gap="xl">
      {/* Header */}
      <Paper p="md" withBorder>
        <Group>
          <ThemeIcon size="lg" radius="md" color="blue">
            <IconBrain size={20} />
          </ThemeIcon>
          <div>
            <Text fw={700}>AI-Generated Insights</Text>
            <Text size="sm" c="dimmed">
              The explainer agent has analyzed the workflow results and generated the following insights.
            </Text>
          </div>
        </Group>
      </Paper>

      {/* Key Findings */}
      <Paper p="md" withBorder>
        <Stack gap="md">
          <Group>
            <ThemeIcon size="md" radius="md" color="violet">
              <IconBulb size={16} />
            </ThemeIcon>
            <Text fw={700}>Key Findings</Text>
          </Group>

          <Accordion>
            {mockInsights.key_findings.map((finding, index) => (
              <Accordion.Item key={index} value={`finding-${index}`}>
                <Accordion.Control>
                  <Group gap="xs">
                    <Text fw={600}>{finding.title}</Text>
                    <Badge color={getImpactColor(finding.impact)}>
                      {finding.impact} impact
                    </Badge>
                    <Badge color={getConfidenceColor(finding.confidence)}>
                      {(finding.confidence * 100).toFixed(0)}% confidence
                    </Badge>
                  </Group>
                </Accordion.Control>
                <Accordion.Panel>
                  <Stack gap="md">
                    <Text>{finding.description}</Text>
                    <Group>
                      <Badge variant="light">{finding.category}</Badge>
                    </Group>
                  </Stack>
                </Accordion.Panel>
              </Accordion.Item>
            ))}
          </Accordion>
        </Stack>
      </Paper>

      {/* Recommendations */}
      <Paper p="md" withBorder>
        <Stack gap="md">
          <Group>
            <ThemeIcon size="md" radius="md" color="green">
              <IconArrowRight size={16} />
            </ThemeIcon>
            <Text fw={700}>Recommendations</Text>
          </Group>

          <SimpleGrid cols={{ base: 1, md: 2 }} spacing="md">
            {mockInsights.recommendations.map((recommendation, index) => (
              <Card key={index} withBorder>
                <Stack gap="md">
                  <Group justify="space-between">
                    <Text fw={600}>{recommendation.title}</Text>
                    <Badge color={getImpactColor(recommendation.expected_impact)}>
                      {recommendation.expected_impact} impact
                    </Badge>
                  </Group>
                  <Text size="sm">{recommendation.description}</Text>
                  <Group>
                    <Badge variant="light">{recommendation.category}</Badge>
                    <Badge variant="outline">
                      {recommendation.implementation_difficulty} difficulty
                    </Badge>
                  </Group>
                </Stack>
              </Card>
            ))}
          </SimpleGrid>
        </Stack>
      </Paper>

      {/* Customer Segments */}
      <Paper p="md" withBorder>
        <Stack gap="md">
          <Group>
            <ThemeIcon size="md" radius="md" color="orange">
              <IconChartBar size={16} />
            </ThemeIcon>
            <Text fw={700}>Customer Segments</Text>
          </Group>

          <SimpleGrid cols={{ base: 1, md: 2 }} spacing="md">
            {mockInsights.customer_segments.map((segment, index) => (
              <Card key={index} withBorder>
                <Stack gap="md">
                  <Group justify="space-between">
                    <Text fw={600}>{segment.name}</Text>
                    <Badge 
                      color={segment.churn_rate > 0.3 ? 'red' : segment.churn_rate > 0.15 ? 'orange' : 'green'}
                    >
                      {(segment.churn_rate * 100).toFixed(0)}% churn rate
                    </Badge>
                  </Group>
                  <Text size="sm">{segment.description}</Text>
                  <Text size="sm" c="dimmed">
                    {(segment.population_percentage * 100).toFixed(0)}% of customer base
                  </Text>
                  <Stack gap="xs">
                    <Text size="sm" fw={600}>Key Characteristics:</Text>
                    <List size="sm">
                      {segment.key_characteristics.map((characteristic, i) => (
                        <List.Item key={i}>{characteristic}</List.Item>
                      ))}
                    </List>
                  </Stack>
                </Stack>
              </Card>
            ))}
          </SimpleGrid>
        </Stack>
      </Paper>

      {/* Model Insights */}
      <Paper p="md" withBorder>
        <Stack gap="md">
          <Group>
            <ThemeIcon size="md" radius="md" color="blue">
              <IconInfoCircle size={16} />
            </ThemeIcon>
            <Text fw={700}>Model Insights</Text>
          </Group>

          <Card withBorder>
            <Stack gap="md">
              <Group>
                <ThemeIcon size="sm" color="blue" variant="light">
                  <IconStar size={14} />
                </ThemeIcon>
                <Text fw={600}>Performance Analysis</Text>
              </Group>
              <Text>{mockInsights.model_insights.performance_analysis}</Text>
            </Stack>
          </Card>

          <Card withBorder>
            <Stack gap="md">
              <Group>
                <ThemeIcon size="sm" color="green" variant="light">
                  <IconStar size={14} />
                </ThemeIcon>
                <Text fw={600}>Feature Importance Analysis</Text>
              </Group>
              <Text>{mockInsights.model_insights.feature_importance_analysis}</Text>
            </Stack>
          </Card>

          <Card withBorder>
            <Stack gap="md">
              <Group>
                <ThemeIcon size="sm" color="orange" variant="light">
                  <IconStar size={14} />
                </ThemeIcon>
                <Text fw={600}>Data Quality Assessment</Text>
              </Group>
              <Text>{mockInsights.model_insights.data_quality_assessment}</Text>
            </Stack>
          </Card>
        </Stack>
      </Paper>
    </Stack>
  );
} 